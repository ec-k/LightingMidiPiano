//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LightingMidiPiano
{
    public partial class @UserInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""781d41d9-f4b9-4d9e-a4a1-a2585d51e148"",
            ""actions"": [
                {
                    ""name"": ""C1"",
                    ""type"": ""Button"",
                    ""id"": ""88d65006-01f6-4fd7-aad9-f5af28765981"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cs1"",
                    ""type"": ""Button"",
                    ""id"": ""2628bcbf-1d4b-42ec-9759-9edf9071f227"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D1"",
                    ""type"": ""Button"",
                    ""id"": ""56f3c9b5-77e8-4977-8434-cdfb97ececd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ds1"",
                    ""type"": ""Button"",
                    ""id"": ""26f4f101-4a21-4896-b1b0-db2b646d3c20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E1"",
                    ""type"": ""Button"",
                    ""id"": ""a0d38129-fe7f-47e9-bb10-2282f7c946c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""afa849c7-6c7f-46d4-8f7d-7217de9e5066"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4c8b8688-4e4b-470e-9d2d-52749db46cb6"",
                    ""path"": ""<MidiDevice>/note000"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6968617-e946-412f-a1f4-93a6ed3d7abe"",
                    ""path"": ""<MidiDevice>/note001"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cs1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29256552-812e-4b36-8421-d3c7a79b1ad4"",
                    ""path"": ""<MidiDevice>/note002"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5308394-f090-493b-9b6c-c250fbcaecd7"",
                    ""path"": ""<MidiDevice>/note003"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ds1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03a75305-067e-410a-998f-8d7ccb3fe659"",
                    ""path"": ""<MidiDevice>/note004"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""351ab916-9c24-4cd5-b3fb-2b44da25d6fb"",
                    ""path"": ""<MidiDevice>/note120"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Keyboard
            m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
            m_Keyboard_C1 = m_Keyboard.FindAction("C1", throwIfNotFound: true);
            m_Keyboard_Cs1 = m_Keyboard.FindAction("Cs1", throwIfNotFound: true);
            m_Keyboard_D1 = m_Keyboard.FindAction("D1", throwIfNotFound: true);
            m_Keyboard_Ds1 = m_Keyboard.FindAction("Ds1", throwIfNotFound: true);
            m_Keyboard_E1 = m_Keyboard.FindAction("E1", throwIfNotFound: true);
            m_Keyboard_Newaction = m_Keyboard.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Keyboard
        private readonly InputActionMap m_Keyboard;
        private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
        private readonly InputAction m_Keyboard_C1;
        private readonly InputAction m_Keyboard_Cs1;
        private readonly InputAction m_Keyboard_D1;
        private readonly InputAction m_Keyboard_Ds1;
        private readonly InputAction m_Keyboard_E1;
        private readonly InputAction m_Keyboard_Newaction;
        public struct KeyboardActions
        {
            private @UserInput m_Wrapper;
            public KeyboardActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @C1 => m_Wrapper.m_Keyboard_C1;
            public InputAction @Cs1 => m_Wrapper.m_Keyboard_Cs1;
            public InputAction @D1 => m_Wrapper.m_Keyboard_D1;
            public InputAction @Ds1 => m_Wrapper.m_Keyboard_Ds1;
            public InputAction @E1 => m_Wrapper.m_Keyboard_E1;
            public InputAction @Newaction => m_Wrapper.m_Keyboard_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
                @C1.started += instance.OnC1;
                @C1.performed += instance.OnC1;
                @C1.canceled += instance.OnC1;
                @Cs1.started += instance.OnCs1;
                @Cs1.performed += instance.OnCs1;
                @Cs1.canceled += instance.OnCs1;
                @D1.started += instance.OnD1;
                @D1.performed += instance.OnD1;
                @D1.canceled += instance.OnD1;
                @Ds1.started += instance.OnDs1;
                @Ds1.performed += instance.OnDs1;
                @Ds1.canceled += instance.OnDs1;
                @E1.started += instance.OnE1;
                @E1.performed += instance.OnE1;
                @E1.canceled += instance.OnE1;
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }

            private void UnregisterCallbacks(IKeyboardActions instance)
            {
                @C1.started -= instance.OnC1;
                @C1.performed -= instance.OnC1;
                @C1.canceled -= instance.OnC1;
                @Cs1.started -= instance.OnCs1;
                @Cs1.performed -= instance.OnCs1;
                @Cs1.canceled -= instance.OnCs1;
                @D1.started -= instance.OnD1;
                @D1.performed -= instance.OnD1;
                @D1.canceled -= instance.OnD1;
                @Ds1.started -= instance.OnDs1;
                @Ds1.performed -= instance.OnDs1;
                @Ds1.canceled -= instance.OnDs1;
                @E1.started -= instance.OnE1;
                @E1.performed -= instance.OnE1;
                @E1.canceled -= instance.OnE1;
                @Newaction.started -= instance.OnNewaction;
                @Newaction.performed -= instance.OnNewaction;
                @Newaction.canceled -= instance.OnNewaction;
            }

            public void RemoveCallbacks(IKeyboardActions instance)
            {
                if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public KeyboardActions @Keyboard => new KeyboardActions(this);
        public interface IKeyboardActions
        {
            void OnC1(InputAction.CallbackContext context);
            void OnCs1(InputAction.CallbackContext context);
            void OnD1(InputAction.CallbackContext context);
            void OnDs1(InputAction.CallbackContext context);
            void OnE1(InputAction.CallbackContext context);
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
